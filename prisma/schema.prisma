generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  isVerified    Boolean   @default(false)
  verificationToken String?
  accounts      Account[]
  sessions      Session[]
  binanceAccounts BinanceAccount[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BinanceAccount {
  id           String     @id @default(cuid())
  userId       String
  name         String
  apiKeyEnc    String
  apiSecretEnc String
  market       String
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cashflows    Cashflow[]
  trades       Trade[]
}

model Trade {
  id          String   @id @default(cuid())
  accountId   String
  exchange    String
  market      String
  symbol      String
  side        String
  qty         Decimal  @db.Decimal(38, 18)
  price       Decimal  @db.Decimal(38, 18)
  feeValue    Decimal  @db.Decimal(38, 18)
  feeAsset    String
  feePct      Decimal  @db.Decimal(38, 18)
  realizedPnl Decimal  @db.Decimal(38, 18)
  orderId     String?
  tradeId     String?
  executedAt  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  account     BinanceAccount  @relation(fields: [accountId], references: [id])
}

model Cashflow {
  id        String   @id @default(cuid())
  accountId String
  type      String
  asset     String
  amount    Decimal  @db.Decimal(38, 18)
  at        DateTime
  note      String?
  createdAt DateTime @default(now())
  account   BinanceAccount @relation(fields: [accountId], references: [id])
}
